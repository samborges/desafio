{"ast":null,"code":"import { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, ViewChild, InjectionToken, Injector, TemplateRef, InjectFlags, Injectable, SkipSelf, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayRef, OverlayModule } from '@angular/cdk/overlay';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { startWith } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Configuration for opening a modal dialog. */\n\nfunction CdkDialogContainer_ng_template_0_Template(rf, ctx) {}\n\nclass DialogConfig {\n  constructor() {\n    /** The ARIA role of the dialog element. */\n    this.role = 'dialog';\n    /** Optional CSS class or classes applied to the overlay panel. */\n\n    this.panelClass = '';\n    /** Whether the dialog has a backdrop. */\n\n    this.hasBackdrop = true;\n    /** Optional CSS class or classes applied to the overlay backdrop. */\n\n    this.backdropClass = '';\n    /** Whether the dialog closes with the escape key or pointer events outside the panel element. */\n\n    this.disableClose = false;\n    /** Width of the dialog. */\n\n    this.width = '';\n    /** Height of the dialog. */\n\n    this.height = '';\n    /** Data being injected into the child component. */\n\n    this.data = null;\n    /** ID of the element that describes the dialog. */\n\n    this.ariaDescribedBy = null;\n    /** ID of the element that labels the dialog. */\n\n    this.ariaLabelledBy = null;\n    /** Dialog label applied via `aria-label` */\n\n    this.ariaLabel = null;\n    /** Whether this a modal dialog. Used to set the `aria-modal` attribute. */\n\n    this.ariaModal = true;\n    /**\n     * Where the dialog should focus on open.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n     * AutoFocusTarget instead.\n     */\n\n    this.autoFocus = 'first-tabbable';\n    /**\n     * Whether the dialog should restore focus to the previously-focused element upon closing.\n     * Has the following behavior based on the type that is passed in:\n     * - `boolean` - when true, will return focus to the element that was focused before the dialog\n     *    was opened, otherwise won't restore focus at all.\n     * - `string` - focus will be restored to the first element that matches the CSS selector.\n     * - `HTMLElement` - focus will be restored to the specific element.\n     */\n\n    this.restoreFocus = true;\n    /**\n     * Whether the dialog should close when the user navigates backwards or forwards through browser\n     * history. This does not apply to navigation via anchor element unless using URL-hash based\n     * routing (`HashLocationStrategy` in the Angular router).\n     */\n\n    this.closeOnNavigation = true;\n    /**\n     * Whether the dialog should close when the dialog service is destroyed. This is useful if\n     * another service is wrapping the dialog and is managing the destruction instead.\n     */\n\n    this.closeOnDestroy = true;\n  }\n\n}\n\nfunction throwDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\n\n\nclass CdkDialogContainer extends BasePortalOutlet {\n  constructor(_elementRef, _focusTrapFactory, _document, _config, _interactivityChecker, _ngZone, _overlayRef, _focusMonitor) {\n    super();\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    this._config = _config;\n    this._interactivityChecker = _interactivityChecker;\n    this._ngZone = _ngZone;\n    this._overlayRef = _overlayRef;\n    this._focusMonitor = _focusMonitor;\n    /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n\n    this._elementFocusedBeforeDialogWasOpened = null;\n    /**\n     * Type of interaction that led to the dialog being closed. This is used to determine\n     * whether the focus style will be applied when returning focus to its original location\n     * after the dialog is closed.\n     */\n\n    this._closeInteractionType = null;\n    /**\n     * Attaches a DOM portal to the dialog container.\n     * @param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n\n    this.attachDomPortal = portal => {\n      if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwDialogContentAlreadyAttachedError();\n      }\n\n      const result = this._portalOutlet.attachDomPortal(portal);\n\n      this._contentAttached();\n\n      return result;\n    };\n\n    this._ariaLabelledBy = this._config.ariaLabelledBy || null;\n    this._document = _document;\n  }\n\n  _contentAttached() {\n    this._initializeFocusTrap();\n\n    this._handleBackdropClicks();\n\n    this._captureInitialFocus();\n  }\n  /**\n   * Can be used by child classes to customize the initial focus\n   * capturing behavior (e.g. if it's tied to an animation).\n   */\n\n\n  _captureInitialFocus() {\n    this._trapFocus();\n  }\n\n  ngOnDestroy() {\n    this._restoreFocus();\n  }\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n\n\n  attachComponentPortal(portal) {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwDialogContentAlreadyAttachedError();\n    }\n\n    const result = this._portalOutlet.attachComponentPortal(portal);\n\n    this._contentAttached();\n\n    return result;\n  }\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n\n\n  attachTemplatePortal(portal) {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwDialogContentAlreadyAttachedError();\n    }\n\n    const result = this._portalOutlet.attachTemplatePortal(portal);\n\n    this._contentAttached();\n\n    return result;\n  } // TODO(crisbeto): this shouldn't be exposed, but there are internal references to it.\n\n  /** Captures focus if it isn't already inside the dialog. */\n\n\n  _recaptureFocus() {\n    if (!this._containsFocus()) {\n      this._trapFocus();\n    }\n  }\n  /**\n   * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n   * attribute to forcefully focus it. The attribute is removed after focus is moved.\n   * @param element The element to focus.\n   */\n\n\n  _forceFocus(element, options) {\n    if (!this._interactivityChecker.isFocusable(element)) {\n      element.tabIndex = -1; // The tabindex attribute should be removed to avoid navigating to that element again\n\n      this._ngZone.runOutsideAngular(() => {\n        const callback = () => {\n          element.removeEventListener('blur', callback);\n          element.removeEventListener('mousedown', callback);\n          element.removeAttribute('tabindex');\n        };\n\n        element.addEventListener('blur', callback);\n        element.addEventListener('mousedown', callback);\n      });\n    }\n\n    element.focus(options);\n  }\n  /**\n   * Focuses the first element that matches the given selector within the focus trap.\n   * @param selector The CSS selector for the element to set focus to.\n   */\n\n\n  _focusByCssSelector(selector, options) {\n    let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n\n    if (elementToFocus) {\n      this._forceFocus(elementToFocus, options);\n    }\n  }\n  /**\n   * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n   * cannot be moved then focus will go to the dialog container.\n   */\n\n\n  _trapFocus() {\n    const element = this._elementRef.nativeElement; // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty when setting focus when autoFocus isn't set to\n    // dialog. If the element inside the dialog can't be focused, then the container is focused\n    // so the user can't tab into other elements behind it.\n\n    switch (this._config.autoFocus) {\n      case false:\n      case 'dialog':\n        // Ensure that focus is on the dialog container. It's possible that a different\n        // component tried to move focus while the open animation was running. See:\n        // https://github.com/angular/components/issues/16215. Note that we only want to do this\n        // if the focus isn't inside the dialog already, because it's possible that the consumer\n        // turned off `autoFocus` in order to move focus themselves.\n        if (!this._containsFocus()) {\n          element.focus();\n        }\n\n        break;\n\n      case true:\n      case 'first-tabbable':\n        this._focusTrap.focusInitialElementWhenReady().then(focusedSuccessfully => {\n          // If we weren't able to find a focusable element in the dialog, then focus the dialog\n          // container instead.\n          if (!focusedSuccessfully) {\n            this._focusDialogContainer();\n          }\n        });\n\n        break;\n\n      case 'first-heading':\n        this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n\n        break;\n\n      default:\n        this._focusByCssSelector(this._config.autoFocus);\n\n        break;\n    }\n  }\n  /** Restores focus to the element that was focused before the dialog opened. */\n\n\n  _restoreFocus() {\n    const focusConfig = this._config.restoreFocus;\n    let focusTargetElement = null;\n\n    if (typeof focusConfig === 'string') {\n      focusTargetElement = this._document.querySelector(focusConfig);\n    } else if (typeof focusConfig === 'boolean') {\n      focusTargetElement = focusConfig ? this._elementFocusedBeforeDialogWasOpened : null;\n    } else if (focusConfig) {\n      focusTargetElement = focusConfig;\n    } // We need the extra check, because IE can set the `activeElement` to null in some cases.\n\n\n    if (this._config.restoreFocus && focusTargetElement && typeof focusTargetElement.focus === 'function') {\n      const activeElement = _getFocusedElementPierceShadowDom();\n\n      const element = this._elementRef.nativeElement; // Make sure that focus is still inside the dialog or is on the body (usually because a\n      // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n      // the consumer moved it themselves before the animation was done, in which case we shouldn't\n      // do anything.\n\n      if (!activeElement || activeElement === this._document.body || activeElement === element || element.contains(activeElement)) {\n        if (this._focusMonitor) {\n          this._focusMonitor.focusVia(focusTargetElement, this._closeInteractionType);\n\n          this._closeInteractionType = null;\n        } else {\n          focusTargetElement.focus();\n        }\n      }\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n  /** Focuses the dialog container. */\n\n\n  _focusDialogContainer() {\n    // Note that there is no focus method when rendering on the server.\n    if (this._elementRef.nativeElement.focus) {\n      this._elementRef.nativeElement.focus();\n    }\n  }\n  /** Returns whether focus is inside the dialog. */\n\n\n  _containsFocus() {\n    const element = this._elementRef.nativeElement;\n\n    const activeElement = _getFocusedElementPierceShadowDom();\n\n    return element === activeElement || element.contains(activeElement);\n  }\n  /** Sets up the focus trap. */\n\n\n  _initializeFocusTrap() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement); // Save the previously focused element. This element will be re-focused\n    // when the dialog closes.\n\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n    }\n  }\n  /** Sets up the listener that handles clicks on the dialog backdrop. */\n\n\n  _handleBackdropClicks() {\n    // Clicking on the backdrop will move focus out of dialog.\n    // Recapture it if closing via the backdrop is disabled.\n    this._overlayRef.backdropClick().subscribe(() => {\n      if (this._config.disableClose) {\n        this._recaptureFocus();\n      }\n    });\n  }\n\n}\n\nCdkDialogContainer.ɵfac = function CdkDialogContainer_Factory(t) {\n  return new (t || CdkDialogContainer)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusTrapFactory), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(DialogConfig), i0.ɵɵdirectiveInject(i1.InteractivityChecker), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1$1.OverlayRef), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n};\n\nCdkDialogContainer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CdkDialogContainer,\n  selectors: [[\"cdk-dialog-container\"]],\n  viewQuery: function CdkDialogContainer_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"tabindex\", \"-1\", 1, \"cdk-dialog-container\"],\n  hostVars: 6,\n  hostBindings: function CdkDialogContainer_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"id\", ctx._config.id || null)(\"role\", ctx._config.role)(\"aria-modal\", ctx._config.ariaModal)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkPortalOutlet\", \"\"]],\n  template: function CdkDialogContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CdkDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    }\n  },\n  dependencies: [i3.CdkPortalOutlet],\n  styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDialogContainer, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-dialog-container',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      host: {\n        'class': 'cdk-dialog-container',\n        'tabindex': '-1',\n        '[attr.id]': '_config.id || null',\n        '[attr.role]': '_config.role',\n        '[attr.aria-modal]': '_config.ariaModal',\n        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n        '[attr.aria-label]': '_config.ariaLabel',\n        '[attr.aria-describedby]': '_config.ariaDescribedBy || null'\n      },\n      template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n      styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DialogConfig]\n      }]\n    }, {\n      type: i1.InteractivityChecker\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1$1.OverlayRef\n    }, {\n      type: i1.FocusMonitor\n    }];\n  }, {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Reference to a dialog opened via the Dialog service.\n */\n\n\nclass DialogRef {\n  constructor(overlayRef, config) {\n    this.overlayRef = overlayRef;\n    this.config = config;\n    /** Emits when the dialog has been closed. */\n\n    this.closed = new Subject();\n    this.disableClose = config.disableClose;\n    this.backdropClick = overlayRef.backdropClick();\n    this.keydownEvents = overlayRef.keydownEvents();\n    this.outsidePointerEvents = overlayRef.outsidePointerEvents();\n    this.id = config.id; // By the time the dialog is created we are guaranteed to have an ID.\n\n    this.keydownEvents.subscribe(event => {\n      if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n        event.preventDefault();\n        this.close(undefined, {\n          focusOrigin: 'keyboard'\n        });\n      }\n    });\n    this.backdropClick.subscribe(() => {\n      if (!this.disableClose) {\n        this.close(undefined, {\n          focusOrigin: 'mouse'\n        });\n      }\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param result Optional result to return to the dialog opener.\n   * @param options Additional options to customize the closing behavior.\n   */\n\n\n  close(result, options) {\n    if (this.containerInstance) {\n      const closedSubject = this.closed;\n      this.containerInstance._closeInteractionType = (options === null || options === void 0 ? void 0 : options.focusOrigin) || 'program';\n      this.overlayRef.dispose();\n      closedSubject.next(result);\n      closedSubject.complete();\n      this.componentInstance = this.containerInstance = null;\n    }\n  }\n  /** Updates the position of the dialog based on the current position strategy. */\n\n\n  updatePosition() {\n    this.overlayRef.updatePosition();\n    return this;\n  }\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n\n\n  updateSize(width = '', height = '') {\n    this.overlayRef.updateSize({\n      width,\n      height\n    });\n    return this;\n  }\n  /** Add a CSS class or an array of classes to the overlay pane. */\n\n\n  addPanelClass(classes) {\n    this.overlayRef.addPanelClass(classes);\n    return this;\n  }\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n\n\n  removePanelClass(classes) {\n    this.overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token for the Dialog's ScrollStrategy. */\n\n\nconst DIALOG_SCROLL_STRATEGY = new InjectionToken('DialogScrollStrategy');\n/** Injection token for the Dialog's Data. */\n\nconst DIALOG_DATA = new InjectionToken('DialogData');\n/** Injection token that can be used to provide default options for the dialog module. */\n\nconst DEFAULT_DIALOG_CONFIG = new InjectionToken('DefaultDialogConfig');\n/** @docs-private */\n\nfunction DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\n\n\nconst DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Unique id for the created dialog. */\n\nlet uniqueId = 0;\n\nclass Dialog {\n  constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy) {\n    this._overlay = _overlay;\n    this._injector = _injector;\n    this._defaultOptions = _defaultOptions;\n    this._parentDialog = _parentDialog;\n    this._overlayContainer = _overlayContainer;\n    this._openDialogsAtThisLevel = [];\n    this._afterAllClosedAtThisLevel = new Subject();\n    this._afterOpenedAtThisLevel = new Subject();\n    this._ariaHiddenElements = new Map();\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n\n    this.afterAllClosed = defer(() => this.openDialogs.length ? this._getAfterAllClosed() : this._getAfterAllClosed().pipe(startWith(undefined)));\n    this._scrollStrategy = scrollStrategy;\n  }\n  /** Keeps track of the currently-open dialogs. */\n\n\n  get openDialogs() {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n  /** Stream that emits when a dialog has been opened. */\n\n\n  get afterOpened() {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  open(componentOrTemplateRef, config) {\n    const defaults = this._defaultOptions || new DialogConfig();\n    config = Object.assign(Object.assign({}, defaults), config);\n    config.id = config.id || `cdk-dialog-${uniqueId++}`;\n\n    if (config.id && this.getDialogById(config.id) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayConfig = this._getOverlayConfig(config);\n\n    const overlayRef = this._overlay.create(overlayConfig);\n\n    const dialogRef = new DialogRef(overlayRef, config);\n\n    const dialogContainer = this._attachContainer(overlayRef, dialogRef, config);\n\n    dialogRef.containerInstance = dialogContainer;\n\n    this._attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config); // If this is the first dialog that we're opening, hide all the non-overlay content.\n\n\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.closed.subscribe(() => this._removeOpenDialog(dialogRef, true));\n    this.afterOpened.next(dialogRef);\n    return dialogRef;\n  }\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n\n\n  closeAll() {\n    reverseForEach(this.openDialogs, dialog => dialog.close());\n  }\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n\n\n  getDialogById(id) {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Make one pass over all the dialogs that need to be untracked, but should not be closed. We\n    // want to stop tracking the open dialog even if it hasn't been closed, because the tracking\n    // determines when `aria-hidden` is removed from elements outside the dialog.\n    reverseForEach(this._openDialogsAtThisLevel, dialog => {\n      // Check for `false` specifically since we want `undefined` to be interpreted as `true`.\n      if (dialog.config.closeOnDestroy === false) {\n        this._removeOpenDialog(dialog, false);\n      }\n    }); // Make a second pass and close the remaining dialogs. We do this second pass in order to\n    // correctly dispatch the `afterAllClosed` event in case we have a mixed array of dialogs\n    // that should be closed and dialogs that should not.\n\n    reverseForEach(this._openDialogsAtThisLevel, dialog => dialog.close());\n\n    this._afterAllClosedAtThisLevel.complete();\n\n    this._afterOpenedAtThisLevel.complete();\n\n    this._openDialogsAtThisLevel = [];\n  }\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param config The dialog configuration.\n   * @returns The overlay configuration.\n   */\n\n\n  _getOverlayConfig(config) {\n    const state = new OverlayConfig({\n      positionStrategy: config.positionStrategy || this._overlay.position().global().centerHorizontally().centerVertically(),\n      scrollStrategy: config.scrollStrategy || this._scrollStrategy(),\n      panelClass: config.panelClass,\n      hasBackdrop: config.hasBackdrop,\n      direction: config.direction,\n      minWidth: config.minWidth,\n      minHeight: config.minHeight,\n      maxWidth: config.maxWidth,\n      maxHeight: config.maxHeight,\n      width: config.width,\n      height: config.height,\n      disposeOnNavigation: config.closeOnNavigation\n    });\n\n    if (config.backdropClass) {\n      state.backdropClass = config.backdropClass;\n    }\n\n    return state;\n  }\n  /**\n   * Attaches a dialog container to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n\n\n  _attachContainer(overlay, dialogRef, config) {\n    var _a, _b;\n\n    const userInjector = (_a = config.injector) !== null && _a !== void 0 ? _a : (_b = config.viewContainerRef) === null || _b === void 0 ? void 0 : _b.injector;\n    const providers = [{\n      provide: DialogConfig,\n      useValue: config\n    }, {\n      provide: DialogRef,\n      useValue: dialogRef\n    }, {\n      provide: OverlayRef,\n      useValue: overlay\n    }];\n    let containerType;\n\n    if (config.container) {\n      if (typeof config.container === 'function') {\n        containerType = config.container;\n      } else {\n        containerType = config.container.type;\n        providers.push(...config.container.providers(config));\n      }\n    } else {\n      containerType = CdkDialogContainer;\n    }\n\n    const containerPortal = new ComponentPortal(containerType, config.viewContainerRef, Injector.create({\n      parent: userInjector || this._injector,\n      providers\n    }), config.componentFactoryResolver);\n    const containerRef = overlay.attach(containerPortal);\n    return containerRef.instance;\n  }\n  /**\n   * Attaches the user-provided component to the already-created dialog container.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogRef Reference to the dialog being opened.\n   * @param dialogContainer Component that is going to wrap the dialog content.\n   * @param config Configuration used to open the dialog.\n   */\n\n\n  _attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config) {\n    const injector = this._createInjector(config, dialogRef, dialogContainer);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      let context = {\n        $implicit: config.data,\n        dialogRef\n      };\n\n      if (config.templateContext) {\n        context = Object.assign(Object.assign({}, context), typeof config.templateContext === 'function' ? config.templateContext() : config.templateContext);\n      }\n\n      dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, context, injector));\n    } else {\n      const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector, config.componentFactoryResolver));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n  }\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog being opened.\n   * @param dialogContainer Component that is going to wrap the dialog content.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n\n\n  _createInjector(config, dialogRef, dialogContainer) {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const providers = [{\n      provide: DIALOG_DATA,\n      useValue: config.data\n    }, {\n      provide: DialogRef,\n      useValue: dialogRef\n    }];\n\n    if (config.providers) {\n      if (typeof config.providers === 'function') {\n        providers.push(...config.providers(dialogRef, config, dialogContainer));\n      } else {\n        providers.push(...config.providers);\n      }\n    }\n\n    if (config.direction && (!userInjector || !userInjector.get(Directionality, null, InjectFlags.Optional))) {\n      providers.push({\n        provide: Directionality,\n        useValue: {\n          value: config.direction,\n          change: of()\n        }\n      });\n    }\n\n    return Injector.create({\n      parent: userInjector || this._injector,\n      providers\n    });\n  }\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   * @param emitEvent Whether to emit an event if this is the last dialog.\n   */\n\n\n  _removeOpenDialog(dialogRef, emitEvent) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1); // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n\n        if (emitEvent) {\n          this._getAfterAllClosed().next();\n        }\n      }\n    }\n  }\n  /** Hides all of the content that isn't an overlay from assistive technology. */\n\n\n  _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement(); // Ensure that the overlay container is attached to the DOM.\n\n\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        const sibling = siblings[i];\n\n        if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  _getAfterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n  }\n\n}\n\nDialog.ɵfac = function Dialog_Factory(t) {\n  return new (t || Dialog)(i0.ɵɵinject(i1$1.Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(DEFAULT_DIALOG_CONFIG, 8), i0.ɵɵinject(Dialog, 12), i0.ɵɵinject(i1$1.OverlayContainer), i0.ɵɵinject(DIALOG_SCROLL_STRATEGY));\n};\n\nDialog.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: Dialog,\n  factory: Dialog.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Dialog, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i0.Injector\n    }, {\n      type: DialogConfig,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DEFAULT_DIALOG_CONFIG]\n      }]\n    }, {\n      type: Dialog,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: i1$1.OverlayContainer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DIALOG_SCROLL_STRATEGY]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Executes a callback against all elements in an array while iterating in reverse.\n * Useful if the array is being modified as it is being iterated.\n */\n\n\nfunction reverseForEach(items, callback) {\n  let i = items.length;\n\n  while (i--) {\n    callback(items[i]);\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass DialogModule {}\n\nDialogModule.ɵfac = function DialogModule_Factory(t) {\n  return new (t || DialogModule)();\n};\n\nDialogModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: DialogModule,\n  declarations: [CdkDialogContainer],\n  imports: [OverlayModule, PortalModule, A11yModule],\n  exports: [// Re-export the PortalModule so that people extending the `CdkDialogContainer`\n  // don't have to remember to import it or be faced with an unhelpful error.\n  PortalModule, CdkDialogContainer]\n});\nDialogModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [Dialog, DIALOG_SCROLL_STRATEGY_PROVIDER],\n  imports: [OverlayModule, PortalModule, A11yModule, // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n  // don't have to remember to import it or be faced with an unhelpful error.\n  PortalModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DialogModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, PortalModule, A11yModule],\n      exports: [// Re-export the PortalModule so that people extending the `CdkDialogContainer`\n      // don't have to remember to import it or be faced with an unhelpful error.\n      PortalModule, CdkDialogContainer],\n      declarations: [CdkDialogContainer],\n      providers: [Dialog, DIALOG_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CdkDialogContainer, DEFAULT_DIALOG_CONFIG, DIALOG_DATA, DIALOG_SCROLL_STRATEGY, DIALOG_SCROLL_STRATEGY_PROVIDER, DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, Dialog, DialogConfig, DialogModule, DialogRef, throwDialogContentAlreadyAttachedError };","map":{"version":3,"sources":["D:/angular/desafio/node_modules/@angular/cdk/fesm2015/dialog.mjs"],"names":["_getFocusedElementPierceShadowDom","i3","BasePortalOutlet","CdkPortalOutlet","ComponentPortal","TemplatePortal","PortalModule","DOCUMENT","i0","Component","ViewEncapsulation","ChangeDetectionStrategy","Optional","Inject","ViewChild","InjectionToken","Injector","TemplateRef","InjectFlags","Injectable","SkipSelf","NgModule","i1","A11yModule","i1$1","Overlay","OverlayConfig","OverlayRef","OverlayModule","ESCAPE","hasModifierKey","Subject","defer","of","Directionality","startWith","DialogConfig","constructor","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","ariaModal","autoFocus","restoreFocus","closeOnNavigation","closeOnDestroy","throwDialogContentAlreadyAttachedError","Error","CdkDialogContainer","_elementRef","_focusTrapFactory","_document","_config","_interactivityChecker","_ngZone","_overlayRef","_focusMonitor","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","attachDomPortal","portal","_portalOutlet","hasAttached","ngDevMode","result","_contentAttached","_ariaLabelledBy","_initializeFocusTrap","_handleBackdropClicks","_captureInitialFocus","_trapFocus","ngOnDestroy","_restoreFocus","attachComponentPortal","attachTemplatePortal","_recaptureFocus","_containsFocus","_forceFocus","element","options","isFocusable","tabIndex","runOutsideAngular","callback","removeEventListener","removeAttribute","addEventListener","focus","_focusByCssSelector","selector","elementToFocus","nativeElement","querySelector","_focusTrap","focusInitialElementWhenReady","then","focusedSuccessfully","_focusDialogContainer","focusConfig","focusTargetElement","activeElement","body","contains","focusVia","destroy","create","backdropClick","subscribe","ɵfac","ElementRef","FocusTrapFactory","InteractivityChecker","NgZone","FocusMonitor","ɵcmp","type","args","encapsulation","None","changeDetection","Default","host","template","styles","undefined","decorators","static","DialogRef","overlayRef","config","closed","keydownEvents","outsidePointerEvents","id","event","keyCode","preventDefault","close","focusOrigin","containerInstance","closedSubject","dispose","next","complete","componentInstance","updatePosition","updateSize","addPanelClass","classes","removePanelClass","DIALOG_SCROLL_STRATEGY","DIALOG_DATA","DEFAULT_DIALOG_CONFIG","DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","block","DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","uniqueId","Dialog","_overlay","_injector","_defaultOptions","_parentDialog","_overlayContainer","scrollStrategy","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","openDialogs","length","_getAfterAllClosed","pipe","_scrollStrategy","afterOpened","open","componentOrTemplateRef","defaults","Object","assign","getDialogById","overlayConfig","_getOverlayConfig","dialogRef","dialogContainer","_attachContainer","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","_removeOpenDialog","closeAll","reverseForEach","dialog","find","state","positionStrategy","position","global","centerHorizontally","centerVertically","direction","minWidth","minHeight","maxWidth","maxHeight","disposeOnNavigation","_a","_b","userInjector","injector","viewContainerRef","providers","useValue","containerType","container","containerPortal","parent","componentFactoryResolver","containerRef","attach","instance","_createInjector","context","$implicit","templateContext","contentRef","get","value","change","emitEvent","index","indexOf","splice","forEach","previousValue","setAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","set","getAttribute","OverlayContainer","ɵprov","items","DialogModule","ɵmod","ɵinj","imports","exports","declarations"],"mappings":"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","sourcesContent":["import { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, ViewChild, InjectionToken, Injector, TemplateRef, InjectFlags, Injectable, SkipSelf, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayRef, OverlayModule } from '@angular/cdk/overlay';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { startWith } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Configuration for opening a modal dialog. */\nclass DialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Optional CSS class or classes applied to the overlay panel. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Optional CSS class or classes applied to the overlay backdrop. */\n        this.backdropClass = '';\n        /** Whether the dialog closes with the escape key or pointer events outside the panel element. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Dialog label applied via `aria-label` */\n        this.ariaLabel = null;\n        /** Whether this a modal dialog. Used to set the `aria-modal` attribute. */\n        this.ariaModal = true;\n        /**\n         * Where the dialog should focus on open.\n         * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n         * AutoFocusTarget instead.\n         */\n        this.autoFocus = 'first-tabbable';\n        /**\n         * Whether the dialog should restore focus to the previously-focused element upon closing.\n         * Has the following behavior based on the type that is passed in:\n         * - `boolean` - when true, will return focus to the element that was focused before the dialog\n         *    was opened, otherwise won't restore focus at all.\n         * - `string` - focus will be restored to the first element that matches the CSS selector.\n         * - `HTMLElement` - focus will be restored to the specific element.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user navigates backwards or forwards through browser\n         * history. This does not apply to navigation via anchor element unless using URL-hash based\n         * routing (`HashLocationStrategy` in the Angular router).\n         */\n        this.closeOnNavigation = true;\n        /**\n         * Whether the dialog should close when the dialog service is destroyed. This is useful if\n         * another service is wrapping the dialog and is managing the destruction instead.\n         */\n        this.closeOnDestroy = true;\n    }\n}\n\nfunction throwDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\nclass CdkDialogContainer extends BasePortalOutlet {\n    constructor(_elementRef, _focusTrapFactory, _document, _config, _interactivityChecker, _ngZone, _overlayRef, _focusMonitor) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._config = _config;\n        this._interactivityChecker = _interactivityChecker;\n        this._ngZone = _ngZone;\n        this._overlayRef = _overlayRef;\n        this._focusMonitor = _focusMonitor;\n        /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * Type of interaction that led to the dialog being closed. This is used to determine\n         * whether the focus style will be applied when returning focus to its original location\n         * after the dialog is closed.\n         */\n        this._closeInteractionType = null;\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwDialogContentAlreadyAttachedError();\n            }\n            const result = this._portalOutlet.attachDomPortal(portal);\n            this._contentAttached();\n            return result;\n        };\n        this._ariaLabelledBy = this._config.ariaLabelledBy || null;\n        this._document = _document;\n    }\n    _contentAttached() {\n        this._initializeFocusTrap();\n        this._handleBackdropClicks();\n        this._captureInitialFocus();\n    }\n    /**\n     * Can be used by child classes to customize the initial focus\n     * capturing behavior (e.g. if it's tied to an animation).\n     */\n    _captureInitialFocus() {\n        this._trapFocus();\n    }\n    ngOnDestroy() {\n        this._restoreFocus();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    // TODO(crisbeto): this shouldn't be exposed, but there are internal references to it.\n    /** Captures focus if it isn't already inside the dialog. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    element.removeEventListener('blur', callback);\n                    element.removeEventListener('mousedown', callback);\n                    element.removeAttribute('tabindex');\n                };\n                element.addEventListener('blur', callback);\n                element.addEventListener('mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n     * cannot be moved then focus will go to the dialog container.\n     */\n    _trapFocus() {\n        const element = this._elementRef.nativeElement;\n        // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty when setting focus when autoFocus isn't set to\n        // dialog. If the element inside the dialog can't be focused, then the container is focused\n        // so the user can't tab into other elements behind it.\n        switch (this._config.autoFocus) {\n            case false:\n            case 'dialog':\n                // Ensure that focus is on the dialog container. It's possible that a different\n                // component tried to move focus while the open animation was running. See:\n                // https://github.com/angular/components/issues/16215. Note that we only want to do this\n                // if the focus isn't inside the dialog already, because it's possible that the consumer\n                // turned off `autoFocus` in order to move focus themselves.\n                if (!this._containsFocus()) {\n                    element.focus();\n                }\n                break;\n            case true:\n            case 'first-tabbable':\n                this._focusTrap.focusInitialElementWhenReady().then(focusedSuccessfully => {\n                    // If we weren't able to find a focusable element in the dialog, then focus the dialog\n                    // container instead.\n                    if (!focusedSuccessfully) {\n                        this._focusDialogContainer();\n                    }\n                });\n                break;\n            case 'first-heading':\n                this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                break;\n            default:\n                this._focusByCssSelector(this._config.autoFocus);\n                break;\n        }\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const focusConfig = this._config.restoreFocus;\n        let focusTargetElement = null;\n        if (typeof focusConfig === 'string') {\n            focusTargetElement = this._document.querySelector(focusConfig);\n        }\n        else if (typeof focusConfig === 'boolean') {\n            focusTargetElement = focusConfig ? this._elementFocusedBeforeDialogWasOpened : null;\n        }\n        else if (focusConfig) {\n            focusTargetElement = focusConfig;\n        }\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus &&\n            focusTargetElement &&\n            typeof focusTargetElement.focus === 'function') {\n            const activeElement = _getFocusedElementPierceShadowDom();\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement ||\n                activeElement === this._document.body ||\n                activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(focusTargetElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    focusTargetElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer() {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = _getFocusedElementPierceShadowDom();\n        return element === activeElement || element.contains(activeElement);\n    }\n    /** Sets up the focus trap. */\n    _initializeFocusTrap() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        // Save the previously focused element. This element will be re-focused\n        // when the dialog closes.\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n        }\n    }\n    /** Sets up the listener that handles clicks on the dialog backdrop. */\n    _handleBackdropClicks() {\n        // Clicking on the backdrop will move focus out of dialog.\n        // Recapture it if closing via the backdrop is disabled.\n        this._overlayRef.backdropClick().subscribe(() => {\n            if (this._config.disableClose) {\n                this._recaptureFocus();\n            }\n        });\n    }\n}\nCdkDialogContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-next.16\", ngImport: i0, type: CdkDialogContainer, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: DialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });\nCdkDialogContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.0-next.16\", type: CdkDialogContainer, selector: \"cdk-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, properties: { \"attr.id\": \"_config.id || null\", \"attr.role\": \"_config.role\", \"attr.aria-modal\": \"_config.ariaModal\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledBy\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\" }, classAttribute: \"cdk-dialog-container\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"], dependencies: [{ kind: \"directive\", type: i3.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-next.16\", ngImport: i0, type: CdkDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, host: {\n                        'class': 'cdk-dialog-container',\n                        'tabindex': '-1',\n                        '[attr.id]': '_config.id || null',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    }, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DialogConfig]\n                    }] }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: i1.FocusMonitor }];\n    }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to a dialog opened via the Dialog service.\n */\nclass DialogRef {\n    constructor(overlayRef, config) {\n        this.overlayRef = overlayRef;\n        this.config = config;\n        /** Emits when the dialog has been closed. */\n        this.closed = new Subject();\n        this.disableClose = config.disableClose;\n        this.backdropClick = overlayRef.backdropClick();\n        this.keydownEvents = overlayRef.keydownEvents();\n        this.outsidePointerEvents = overlayRef.outsidePointerEvents();\n        this.id = config.id; // By the time the dialog is created we are guaranteed to have an ID.\n        this.keydownEvents.subscribe(event => {\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this.close(undefined, { focusOrigin: 'keyboard' });\n            }\n        });\n        this.backdropClick.subscribe(() => {\n            if (!this.disableClose) {\n                this.close(undefined, { focusOrigin: 'mouse' });\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param result Optional result to return to the dialog opener.\n     * @param options Additional options to customize the closing behavior.\n     */\n    close(result, options) {\n        if (this.containerInstance) {\n            const closedSubject = this.closed;\n            this.containerInstance._closeInteractionType = (options === null || options === void 0 ? void 0 : options.focusOrigin) || 'program';\n            this.overlayRef.dispose();\n            closedSubject.next(result);\n            closedSubject.complete();\n            this.componentInstance = this.containerInstance = null;\n        }\n    }\n    /** Updates the position of the dialog based on the current position strategy. */\n    updatePosition() {\n        this.overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this.overlayRef.updateSize({ width, height });\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this.overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this.overlayRef.removePanelClass(classes);\n        return this;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token for the Dialog's ScrollStrategy. */\nconst DIALOG_SCROLL_STRATEGY = new InjectionToken('DialogScrollStrategy');\n/** Injection token for the Dialog's Data. */\nconst DIALOG_DATA = new InjectionToken('DialogData');\n/** Injection token that can be used to provide default options for the dialog module. */\nconst DEFAULT_DIALOG_CONFIG = new InjectionToken('DefaultDialogConfig');\n/** @docs-private */\nfunction DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nconst DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Unique id for the created dialog. */\nlet uniqueId = 0;\nclass Dialog {\n    constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length\n            ? this._getAfterAllClosed()\n            : this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    open(componentOrTemplateRef, config) {\n        const defaults = (this._defaultOptions || new DialogConfig());\n        config = Object.assign(Object.assign({}, defaults), config);\n        config.id = config.id || `cdk-dialog-${uniqueId++}`;\n        if (config.id &&\n            this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayConfig = this._getOverlayConfig(config);\n        const overlayRef = this._overlay.create(overlayConfig);\n        const dialogRef = new DialogRef(overlayRef, config);\n        const dialogContainer = this._attachContainer(overlayRef, dialogRef, config);\n        dialogRef.containerInstance = dialogContainer;\n        this._attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.closed.subscribe(() => this._removeOpenDialog(dialogRef, true));\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        reverseForEach(this.openDialogs, dialog => dialog.close());\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Make one pass over all the dialogs that need to be untracked, but should not be closed. We\n        // want to stop tracking the open dialog even if it hasn't been closed, because the tracking\n        // determines when `aria-hidden` is removed from elements outside the dialog.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => {\n            // Check for `false` specifically since we want `undefined` to be interpreted as `true`.\n            if (dialog.config.closeOnDestroy === false) {\n                this._removeOpenDialog(dialog, false);\n            }\n        });\n        // Make a second pass and close the remaining dialogs. We do this second pass in order to\n        // correctly dispatch the `afterAllClosed` event in case we have a mixed array of dialogs\n        // that should be closed and dialogs that should not.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => dialog.close());\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n        this._openDialogsAtThisLevel = [];\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param config The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(config) {\n        const state = new OverlayConfig({\n            positionStrategy: config.positionStrategy ||\n                this._overlay.position().global().centerHorizontally().centerVertically(),\n            scrollStrategy: config.scrollStrategy || this._scrollStrategy(),\n            panelClass: config.panelClass,\n            hasBackdrop: config.hasBackdrop,\n            direction: config.direction,\n            minWidth: config.minWidth,\n            minHeight: config.minHeight,\n            maxWidth: config.maxWidth,\n            maxHeight: config.maxHeight,\n            width: config.width,\n            height: config.height,\n            disposeOnNavigation: config.closeOnNavigation,\n        });\n        if (config.backdropClass) {\n            state.backdropClass = config.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachContainer(overlay, dialogRef, config) {\n        var _a, _b;\n        const userInjector = (_a = config.injector) !== null && _a !== void 0 ? _a : (_b = config.viewContainerRef) === null || _b === void 0 ? void 0 : _b.injector;\n        const providers = [\n            { provide: DialogConfig, useValue: config },\n            { provide: DialogRef, useValue: dialogRef },\n            { provide: OverlayRef, useValue: overlay },\n        ];\n        let containerType;\n        if (config.container) {\n            if (typeof config.container === 'function') {\n                containerType = config.container;\n            }\n            else {\n                containerType = config.container.type;\n                providers.push(...config.container.providers(config));\n            }\n        }\n        else {\n            containerType = CdkDialogContainer;\n        }\n        const containerPortal = new ComponentPortal(containerType, config.viewContainerRef, Injector.create({ parent: userInjector || this._injector, providers }), config.componentFactoryResolver);\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param config Configuration used to open the dialog.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config) {\n        const injector = this._createInjector(config, dialogRef, dialogContainer);\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            let context = { $implicit: config.data, dialogRef };\n            if (config.templateContext) {\n                context = Object.assign(Object.assign({}, context), (typeof config.templateContext === 'function'\n                    ? config.templateContext()\n                    : config.templateContext));\n            }\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, context, injector));\n        }\n        else {\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector, config.componentFactoryResolver));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const providers = [\n            { provide: DIALOG_DATA, useValue: config.data },\n            { provide: DialogRef, useValue: dialogRef },\n        ];\n        if (config.providers) {\n            if (typeof config.providers === 'function') {\n                providers.push(...config.providers(dialogRef, config, dialogContainer));\n            }\n            else {\n                providers.push(...config.providers);\n            }\n        }\n        if (config.direction &&\n            (!userInjector ||\n                !userInjector.get(Directionality, null, InjectFlags.Optional))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() },\n            });\n        }\n        return Injector.create({ parent: userInjector || this._injector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     * @param emitEvent Whether to emit an event if this is the last dialog.\n     */\n    _removeOpenDialog(dialogRef, emitEvent) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                if (emitEvent) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        }\n    }\n    /** Hides all of the content that isn't an overlay from assistive technology. */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                const sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n}\nDialog.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-next.16\", ngImport: i0, type: Dialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: DEFAULT_DIALOG_CONFIG, optional: true }, { token: Dialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: DIALOG_SCROLL_STRATEGY }], target: i0.ɵɵFactoryTarget.Injectable });\nDialog.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.0-next.16\", ngImport: i0, type: Dialog });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-next.16\", ngImport: i0, type: Dialog, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: DialogConfig, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DEFAULT_DIALOG_CONFIG]\n                    }] }, { type: Dialog, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DIALOG_SCROLL_STRATEGY]\n                    }] }];\n    } });\n/**\n * Executes a callback against all elements in an array while iterating in reverse.\n * Useful if the array is being modified as it is being iterated.\n */\nfunction reverseForEach(items, callback) {\n    let i = items.length;\n    while (i--) {\n        callback(items[i]);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DialogModule {\n}\nDialogModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-next.16\", ngImport: i0, type: DialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nDialogModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.0-next.16\", ngImport: i0, type: DialogModule, declarations: [CdkDialogContainer], imports: [OverlayModule, PortalModule, A11yModule], exports: [\n        // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n        // don't have to remember to import it or be faced with an unhelpful error.\n        PortalModule,\n        CdkDialogContainer\n    ] });\nDialogModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.0-next.16\", ngImport: i0, type: DialogModule, providers: [Dialog, DIALOG_SCROLL_STRATEGY_PROVIDER], imports: [OverlayModule, PortalModule, A11yModule,\n        // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n        // don't have to remember to import it or be faced with an unhelpful error.\n        PortalModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-next.16\", ngImport: i0, type: DialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, A11yModule],\n                    exports: [\n                        // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n                        // don't have to remember to import it or be faced with an unhelpful error.\n                        PortalModule,\n                        CdkDialogContainer,\n                    ],\n                    declarations: [CdkDialogContainer],\n                    providers: [Dialog, DIALOG_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkDialogContainer, DEFAULT_DIALOG_CONFIG, DIALOG_DATA, DIALOG_SCROLL_STRATEGY, DIALOG_SCROLL_STRATEGY_PROVIDER, DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, Dialog, DialogConfig, DialogModule, DialogRef, throwDialogContentAlreadyAttachedError };\n"]},"metadata":{},"sourceType":"module"}